{"version":3,"sources":["counter/Counter.js","form/LoginForm.js","profile/Avatar.js","profile/Profile.js","App.js","serviceWorker.js","index.js","profile/react.svg"],"names":["Counter","state","count","onIncClick","_this","setState","onSubClick","this","react_default","a","createElement","onClick","Component","LoginForm","handleOnSubmit","event","preventDefault","console","log","handleOnChange","Object","defineProperty","target","name","value","onSubmit","type","onChange","Avatar","props","src","style","width","Profile","className","profile_Avatar","reactLogo","defaultProps","App","counter_Counter","profile_Profile","form_LoginForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6PA4BeA,oNAxBbC,MAAQ,CACNC,MAAO,KAGTC,WAAa,WACXC,EAAKC,SAAS,CAACH,MAAQE,EAAKH,MAAMC,MAAQ,OAG5CI,WAAa,WACXF,EAAKC,SAAS,CAACH,MAAQE,EAAKH,MAAMC,MAAQ,6EAGnC,IACCA,EAAUK,KAAKN,MAAfC,MACR,OACIM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,KAAKD,YAAtB,cACAE,EAAAC,EAAAC,cAAA,UAAKR,GACLM,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,KAAKJ,YAAtB,qBApBYS,qBC0BPC,6MAxBbZ,MAAQ,KAERa,eAAiB,SAACC,GAChBA,EAAMC,iBACNC,QAAQC,IAAI,cAAed,EAAKH,UAGlCkB,eAAiB,SAACJ,GAChBX,EAAKC,SAALe,OAAAC,EAAA,EAAAD,CAAA,GAAiBL,EAAMO,OAAOC,KAAOR,EAAMO,OAAOE,iFAIlD,OACIhB,EAAAC,EAAAC,cAAA,QAAMe,SAAUlB,KAAKO,gBACnBN,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,OAAOH,KAAK,WAAWI,SAAUpB,KAAKY,iBAClDX,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,WAAWH,KAAK,WAAWI,SAAUpB,KAAKY,iBAJxD,IAI2EX,EAAAC,EAAAC,cAAA,WACzEF,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,UAAb,iBApBcd,aCKTgB,MALf,SAAgBC,GAAO,IACbC,EAAQD,EAARC,IACN,OAAOtB,EAAAC,EAAAC,cAAA,OAAKoB,IAAKA,EAAKC,MAAO,CAAEC,MAAO,uBCA1C,SAASC,EAAQJ,GACf,OACIrB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,UACb1B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACyB,EAAD,CAAQL,IAAKM,OAMrBH,EAAQI,aAAe,GAERJ,QCMAK,mLAdX,OACE9B,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAC+B,EAAD,cAVU7B,aCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.19801ced.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Counter extends Component {\n\n  state = {\n    count: 0,\n  };\n\n  onIncClick = () => {\n    this.setState({count : this.state.count + 1 });\n  };\n\n  onSubClick = () => {\n    this.setState({count : this.state.count - 1 });\n  };\n\n  render() {\n    const { count } = this.state;\n    return (\n        <div >\n          <button onClick={this.onSubClick}>Minus (-) </button>\n          <h4>{count}</h4>\n          <button onClick={this.onIncClick}>Plus (+) </button>\n        </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React, {Component} from 'react';\n\nclass LoginForm extends Component {\n\n  state = {};\n\n  handleOnSubmit = (event) => {\n    event.preventDefault();\n    console.log('FORM VALUES', this.state);\n  };\n\n  handleOnChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value});\n  };\n\n  render() {\n    return (\n        <form onSubmit={this.handleOnSubmit}>\n          <h5>User Name</h5>\n          <input type='text' name='userName' onChange={this.handleOnChange}/>\n          <h5>Password</h5>\n          <input type='password' name='password' onChange={this.handleOnChange} /> <br />\n          <button type='submit'>Login</button>\n        </form>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React from 'react';\n\nfunction Avatar(props) {\n  const { src } = props;\n    return <img src={src} style={{ width: 40}} />;\n}\n\nexport default Avatar;\n","import React from 'react';\nimport Avatar from './Avatar';\nimport reactLogo from './react.svg';\n\nfunction Profile(props) {\n  return (\n      <div className='center'>\n        <span>My Profile</span>\n        <Avatar src={reactLogo} />\n      </div>\n  );\n}\n\nProfile.propTypes = {};\nProfile.defaultProps = {};\n\nexport default Profile;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Counter from './counter/Counter';\nimport LoginForm from './form/LoginForm';\nimport Profile from './profile/Profile';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>Counter</h3>\n        <Counter />\n        <hr />\n        <Profile />\n        <hr />\n        <h3>Login Form</h3>\n        <LoginForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/react.8e26f220.svg\";"],"sourceRoot":""}